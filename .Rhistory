# plot
p+
geom_vline(xintercept = lngs,alpha=0.3,col='darkblue')+
geom_hline(yintercept = lats,alpha=0.3,col='darkblue')
# load class package
library(class)
# map each point to closest school
closest_school <- class::knn1(coords[,1:2],all,coords[,4])
all$school <- closest_school
# lets map again
p+
geom_point(data=all,
aes(x=lng,y=lat,col=school),size=2)+
geom_point(data=coords,
aes(x=lon,y=lat),size=3)+
theme(legend.position = 'top')+
labs(col='',caption='All points are mapped to their closest school')
resolution <- 1000 # set grid resolution
# generate a sequence across latitudes
lats <- seq(bbox[2],bbox[4],length=resolution)
# generate a sequence across longitudes
lngs <- seq(bbox[1],bbox[3],length=resolution)
# create all combinations
all <- expand.grid(lng=lngs,lat=lats)
closest_school <- class::knn1(coords[,1:2],all,coords[,4])
all$school <- closest_school
# generate two variables
x <- rnorm(100)
y <- rnorm(100)
df <- data.frame(x=x,y=y)
# compute convex hull
ch <- df %>%
as.matrix %>%
chull
# close polygon
ch <- c(ch,ch[1])
# plot
ggplot(df,aes(x,y))+
geom_point()+
geom_polygon(data=df[ch,],aes(x,y),col='red',fill=NA)+
labs(title='Example of a convex hull')+
theme_minimal()+
theme(aspect.ratio=1)
# create a helper function to compute the convex hull
compute_convexhull <- function(df) {
ch <- df %>%
select(lng,lat) %>%
as.matrix %>%
chull
return(df[c(ch,ch[1]),])
}
library(purrr)
# compute convex hull using grid
convex_hulls <- all %>%
split(.$school) %>%
map(~compute_convexhull(.)) %>%
reduce(function(x,y) {
union_all(x,y)
})
convex_hulls %>% head(20) %>% kable
p+
geom_polygon(data=convex_hulls,
aes(x=lng,y=lat,group=school,fill=school),alpha=0.5)+
geom_path(data=convex_hulls,
aes(x=lng,y=lat,group=school,fill=school),alpha=0.5,col='white')+
geom_point(data=coords,
aes(x=lon,y=lat),col='darkblue',size=2)+
labs(x='',y='',fill='',title='School Zones')
# load leaflet library
library(leaflet)
library(htmlwidgets)
polys <- convex_hulls %>%
split(.$school)
# generate some colours
factpal <- colorFactor(rainbow(nrow(coords)),levels(convex_hulls))
# create a black and white base map and add school markers
leaflet_map <- leaflet(polys) %>%
addTiles('http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png',attribution = '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>')
for (p in polys) {
leaflet_map <- leaflet_map %>%
addPolygons(data=p,
lng=~lng,
lat=~lat,
fillOpacity = 0.02,
fillColor=~factpal(school),
stroke=F)
}
leaflet_map <- leaflet_map %>%
addMarkers(data=coords,lng=~lon,lat=~lat,label=~clean_name)
leaflet_map
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_rmd", "_posts", "figs/", "_caches/")
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE,cache = T,autodep = T)
library(pander)
pander(coords)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
?pander
library(xtable)
xtable(coords)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE,cache = T,autodep = T)
library(sp)
library(rgdal)
df
all
all <- expand.grid(lng=lngs,lat=lats)
knitr::opts_chunk$set(echo = TRUE,cache = T,autodep = T)
# load some packages
library(ggmap)
library(dplyr)
# define candidate schools
school_names <- c('Rondebosch Boys Preparatory School',
'Groote Schuur Primary School, Rondebosch',
'Golden Grove Primary School, Rondebosch',
'Claremont Primary School, Claremont, Cape Town',
'Rosebank Junior School',
'Grove Primary School, Claremont, Cape Town'
)
# geocode
coords <- geocode(school_names)
coords$name <- school_names
library(knitr)
coords %>% kable(.,align = 'c')
# load libraries for plotting
library(ggplot2)
library(ggrepel)
library(tidyr)
library(dplyr)
# clean names
coords <- coords %>% separate(name,into=c('clean_name','other'),sep = ',',remove = F)
# create bounding box for map and pad slightly bigger
lng_range <- diff(range(coords$lon))
lat_range <- diff(range(coords$lat))
margin <- 1
bbox <- c(
left=min(coords$lon),
bottom=min(coords$lat),
right=max(coords$lon),
top=max(coords$lat)
)
# add some padding
bbox <- bbox+c(-lng_range*margin,-lat_range*margin,lng_range*margin,lat_range*margin)
# download map from google
map <- get_map(location=bbox,zoom=14,color = 'bw')
# create a base map to work off of
p <- ggmap(map,
extent = 'normal')+
geom_point(data=coords,
aes(x=lon,y=lat),col='darkblue',size=2)+
coord_map(projection="mercator",
xlim=c(attr(map, "bb")$ll.lon, attr(map, "bb")$ur.lon),
ylim=c(attr(map, "bb")$ll.lat, attr(map, "bb")$ur.lat))+
labs(x='',y='')+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
# plot schools
p+
geom_text_repel(data=coords,
aes(x=lon,y=lat,label=clean_name),col='darkblue')
all <- expand.grid(lng=lngs,lat=lats)
p+
geom_vline(xintercept = lngs,alpha=0.3,col='darkblue')+
geom_hline(yintercept = lats,alpha=0.3,col='darkblue')
resolution <- 100 # set grid resolution
lats <- seq(bbox[2],bbox[4],length=resolution)
lngs <- seq(bbox[1],bbox[3],length=resolution)
all <- expand.grid(lng=lngs,lat=lats)
p+
geom_vline(xintercept = lngs,alpha=0.3,col='darkblue')+
geom_hline(yintercept = lats,alpha=0.3,col='darkblue')
library(sp)
library(sp)
library(rgdal)
df <- all[,1,2]
df <- all[,c(1,2)]
coordinates(df) <- c('x','y')
?coordinates
df <- all[,c(1,2)]
coordinates(df) <- c('lng','lat')
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(df, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
res <- spTransform(df, CRS(paste("+proj=utm +zone=",'34H'," ellps=WGS84",sep='')))
res
computeUTM <- function(df) {
coordinates(df) <- c('lng','lat')
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(df, CRS(paste("+proj=utm +zone=",'34H'," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
computeUTM <- function(df) {
coordinates(df) <- c('lng','lat')
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(df, CRS(paste("+proj=utm +zone=",'34H'," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
utm_all <- computeUTM(all[,c(1,2)])
utm_coords <- computeUTM(coords[,c('lng','lat')])
utm_coords <- computeUTM(coords[,c('lon','lat')])
utm_coords <- computeUTM(coords[,c('lon','lat')]) %>% set_names(c('lng','lat'))
utm_coords <- computeUTM(coords[,c('lon','lat')] %>% set_names(c('lng','lat')) )
utm_coords
utm_coords
closest_school <- class::knn1(utm_coords[,1:2],utm_all,utm_coords[,3])
utm_coords <- cbind(utm_coords,coords$clean_name)
closest_school <- class::knn1(utm_coords[,1:2],utm_all,utm_coords[,3])
all$school <- closest_school
p+
geom_point(data=all,
aes(x=lng,y=lat,col=school),size=2)+
geom_point(data=coords,
aes(x=lon,y=lat),size=3)+
theme(legend.position = 'top')+
labs(col='',caption='All points are mapped to their closest school')
resolution <- 50 # set grid resolution
# generate a sequence across latitudes
lats <- seq(bbox[2],bbox[4],length=resolution)
# generate a sequence across longitudes
lngs <- seq(bbox[1],bbox[3],length=resolution)
# create all combinations
all <- expand.grid(lng=lngs,lat=lats)
# plot
p+
geom_vline(xintercept = lngs,alpha=0.3,col='darkblue')+
geom_hline(yintercept = lats,alpha=0.3,col='darkblue')
# load some spatial packages
library(sp)
library(rgdal)
# helper function to compute UTM coordinates for distance calculation
computeUTM <- function(df) {
coordinates(df) <- c('lng','lat')
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(df, CRS(paste("+proj=utm +zone=",'34H'," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
# load class package for k nearest neighbours
library(class)
# map each point to closest school
utm_all <- computeUTM(all[,c(1,2)])
utm_coords <- computeUTM(coords[,c('lon','lat')] %>% set_names(c('lng','lat')) )
utm_coords <- cbind(utm_coords,coords$clean_name)
closest_school <- class::knn1(utm_coords[,1:2],utm_all,utm_coords[,3])
all$school <- closest_school
# lets map again
p+
geom_point(data=all,
aes(x=lng,y=lat,col=school),size=2)+
geom_point(data=coords,
aes(x=lon,y=lat),size=3)+
theme(legend.position = 'top')+
labs(col='',caption='All points are mapped to their closest school')
# load some spatial packages
library(sp)
library(rgdal)
# helper function to compute UTM coordinates for distance calculation
computeUTM <- function(df) {
coordinates(df) <- c('lng','lat')
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(df, CRS(paste("+proj=utm +zone=",'34H'," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
# convert to UTM coordinates so that we can can calculate nearest schools
utm_all <- computeUTM(all[,c(1,2)])
utm_coords <- computeUTM(coords[,c('lon','lat')] %>% set_names(c('lng','lat')) )
utm_coords <- cbind(utm_coords,coords$clean_name)
library(class) # load class package for k nearest neighbours
closest_school <- class::knn1(utm_coords[,1:2],utm_all,utm_coords[,3])
all$school <- closest_school
# lets map again
p+
geom_point(data=all,
aes(x=lng,y=lat,col=school),size=2)+
geom_point(data=coords,
aes(x=lon,y=lat),size=3)+
theme(legend.position = 'top')+
labs(col='',caption='All points are mapped to their closest school')
resolution <- 1000 # set grid resolution
# generate a sequence across latitudes
lats <- seq(bbox[2],bbox[4],length=resolution)
# generate a sequence across longitudes
lngs <- seq(bbox[1],bbox[3],length=resolution)
# create all combinations
all <- expand.grid(lng=lngs,lat=lats)
# convert to UTM coordinates so that we can can calculate nearest schools
utm_all <- computeUTM(all[,c(1,2)])
utm_coords <- computeUTM(coords[,c('lon','lat')] %>% set_names(c('lng','lat')) )
utm_coords <- cbind(utm_coords,coords$clean_name)
closest_school <- class::knn1(utm_coords[,1:2],utm_all,utm_coords[,3])
all$school <- closest_school
# generate two variables
x <- rnorm(100)
y <- rnorm(100)
df <- data.frame(x=x,y=y)
# compute convex hull
ch <- df %>%
as.matrix %>%
chull
# close polygon
ch <- c(ch,ch[1])
# plot
ggplot(df,aes(x,y))+
geom_point()+
geom_polygon(data=df[ch,],aes(x,y),col='red',fill=NA)+
labs(title='Example of a convex hull')+
theme_minimal()+
theme(aspect.ratio=1)
# create a helper function to compute the convex hull
compute_convexhull <- function(df) {
ch <- df %>%
select(lng,lat) %>%
as.matrix %>%
chull
return(df[c(ch,ch[1]),])
}
suppressPackageStartupMessages(library(purrr))
# compute convex hull using grid
convex_hulls <- all %>%
split(.$school) %>%
map(~compute_convexhull(.)) %>%
reduce(function(x,y) {
union_all(x,y)
})
convex_hulls %>% head(10) %>% kable(.,align = 'c')
p+
geom_polygon(data=convex_hulls,
aes(x=lng,y=lat,group=school,fill=school),alpha=0.5)+
geom_path(data=convex_hulls,
aes(x=lng,y=lat,group=school,fill=school),alpha=0.5,col='white')+
geom_point(data=coords,
aes(x=lon,y=lat),col='darkblue',size=2)+
labs(x='',y='',fill='',title='School Zones')
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
source('~/niklasvm/niklasvm.github.io/scripts/compile for blog.R', echo=TRUE)
lines <- readLines('./_posts/2017-02-25-choosing-where-to-live.md')
lines[grepl('.png',lines,fixed=T)]
img_lines <- grepl('.png',lines,fixed=T)
filename <- './_posts/2017-02-25-choosing-where-to-live.md'
lines <- readLines(filename)
img_lines <- grepl('.png',lines,fixed=T)
lines[img_lines]
fixTag <- function(s) {
s <- gsub('![center](','')
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;">'))
}
lines[img_lines][1]
fixTag(lines[img_lines][1])
fixTag <- function(s) {
s <- gsub('![center](','',s)
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;">'))
}
fixTag(lines[img_lines][1])
fixTag <- function(s) {
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;">'))
}
fixTag(lines[img_lines][1])
fixTag <- function(s) {
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;">',s))
}
fixTag(lines[img_lines][1])
fixTag(lines[img_lines][1]) %>% cat
fixTag(lines[img_lines][1])
s <- lines[img_lines][1]
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
s
knit_folder("_rmd", "_posts", "figs/", "_caches/")
knit_folder("_rmd", "_posts", "figs/", "_caches/")
filename <- './_posts/2017-02-25-choosing-where-to-live.md'
lines <- readLines(filename)
img_lines <- grepl('.png',lines,fixed=T)
s <- lines[img_lines][1]
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
sprintf('<img src="%s" style="width:auto;">',s)
print(sprintf('<img src="%s" style="width:auto;">',s))
cat(sprintf('<img src="%s" style="width:auto;">',s))
lines[img_lines] <-
fixTag <- function(s) {
if (length(s)==1) {
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;">',s))
} else {
return(sapply(s,fixTag,simplify = T))
}
}
lines[img_lines] <-
fixTag <- function(s) {
if (length(s)==1) {
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;">',s))
} else {
return(sapply(s,fixTag,simplify = T))
}
}
return(sapply(s,fixTag,simplify = T))
lines[img_lines] <-
fixTag <- function(s) {
if (length(s)==1) {
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;">',s))
} else {
return(sapply(s,fixTag,simplify = T))
}
}
lines[img_lines]
fixTag <- function(s) {
if (length(s)==1) {
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;">',s))
} else {
return(sapply(s,fixTag,simplify = T))
}
}
lines[img_lines] <- fixTag(lines[img_lines])
lines
lines[img_lines]
writeLines(lines,con = filename)
knit_folder("_rmd", "_posts", "figs/", "_caches/")
filename <- './_posts/2017-02-25-choosing-where-to-live.md'
lines <- readLines(filename)
img_lines <- grepl('.png',lines,fixed=T)
lines[img_lines] <- fixTag(lines[img_lines])
fixTag <- function(s) {
if (length(s)==1) {
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;height:auto;">',s))
} else {
return(sapply(s,fixTag,simplify = T))
}
}
filename <- './_posts/2017-02-25-choosing-where-to-live.md'
lines <- readLines(filename)
img_lines <- grepl('.png',lines,fixed=T)
fixTag <- function(s) {
if (length(s)==1) {
s <- gsub('![center](','',s,fixed=T)
s <- substr(s,1,nchar(s)-1)
return(sprintf('<img src="%s" style="width:auto;height:auto;">',s))
} else {
return(sapply(s,fixTag,simplify = T))
}
}
lines[img_lines] <- fixTag(lines[img_lines])
writeLines(lines,con = filename)
